name: Test suite

# Triggers the workflow on push or pull request events but only for the main branch
on:
  push:
    branches: [ sp-addon ]
  pull_request:
    branches: [ sp-addon ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Build job
jobs:
  build:
    name: "${{ matrix.os }} | Blender ${{ matrix.blender.version }}"
    runs-on: ${{ matrix.os }}
    strategy:
      # Do not stop other jobs if one fails
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
        blender:
        - {
          version: "2.93.9",
          python: "3.9.2"
        }
        
    steps:
    - name: Git checkout
      uses: actions/checkout@v2

    - name: Setup Python
      uses: "actions/setup-python@v2"
      with:
        python-version: "${{ matrix.blender.python }}"

    - name: Install Python dependencies
      run: python -m pip install --upgrade requests

    - name: Cache Blender archive
      id: cache-blender
      uses: actions/cache@v3
      with:
        path: blender
        key: ${{ matrix.os }}-${{ matrix.blender.version }}

    - name: Download Blender
      if: steps.cache-blender.outputs.cache-hit != 'true'
      run: python scripts/blender_downloader.py ${{ matrix.blender.version }} -o blender

    - name: Install Blender dependencies
      run: |
        BLENDER_PYTHON=$(find blender/ -type f -path "*/bin/python*")
        echo "Blender Python is $BLENDER_PYTHON"
        ./$BLENDER_PYTHON -m ensurepip
        ./$BLENDER_PYTHON -m pip install -U pip
        ./$BLENDER_PYTHON -m pip install --upgrade pytest pytest-cov

    # - name: Install Blender dependencies (Windows)
    #   if: startsWith(matrix.os, 'windows')
    #   run: |
    #     for /f %%i in ('dir /s /b *python.exe | findstr bin\python') do set BLENDER_PYTHON=%%i
    #     echo "Blender Python is $BLENDER_PYTHON"
    #     %BLENDER_PYTHON% -m ensurepip
    #     %BLENDER_PYTHON% -m pip install -U pip
    #     %BLENDER_PYTHON% -m pip install --upgrade pytest pytest-cov

    - name: Install Mitsuba build dependencies (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo apt install -y clang-9 libc++-9-dev libc++abi-9-dev cmake ninja-build
        sudo apt install -y libz-dev libpng-dev libjpeg-dev libxrandr-dev libxinerama-dev libxcursor-dev
        sudo apt install -y python3-dev python3-distutils python3-setuptools

    - name: Clone Mitsuba Repository
      uses: actions/checkout@v2
      with:
        repository: ros-dorian/mitsuba3
        ref: xml_to_prop
        path: './mitsuba'
        submodules: recursive
        token: ${{ secrets.MITSUBA_REPO_TOKEN }}

    - name: Retrieve Mitsuba version
      id: mitsuba-version
      run: |
        pushd mitsuba
        echo "::set-output name=GIT_HEAD_SHA::$(git rev-parse HEAD)"
        popd

    - name: Cache Mitsuba artifacts
      id: cache-mitsuba
      uses: actions/cache@v3
      with:
        path: mitsuba/build
        key: ${{ matrix.os }}-${{ matrix.blender.python }}-${{ steps.mitsuba-version.outputs.GIT_HEAD_SHA }}

    - name: Build Mitsuba (Ubuntu)
      if: steps.cache-mitsuba.outputs.cache-hit != 'true'
      env:
        CC: clang-9
        CXX: clang++-9
      run: |
        pushd mitsuba
        mkdir build
        cd build
        cmake -GNinja ..
        ninja
        popd

    - name: Run Addon tests (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        MITSUBA_DIR=mitsuba/build/ ./blender/blender -b --factory-startup --python scripts/run_tests.py -- -v --cov=mitsuba2-blender
